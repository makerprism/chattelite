/* AUTOMATICALLY GENERATED BY codegen/main.ml */

// API input and output types
export type UserId = string

export type UserCursor = number

export type ConversationId = string

export type ConversationCursor = number

export type LineId = string

export type DateTime = string

// API input types


// API output types
export type User = {
    type: "User";
    display_name: string,
    user_id: UserId
}

export type PaginatedUsers = {
    type: "PaginatedUsers";
    next?: UserCursor,
    prev?: UserCursor,
    objs: User[]
}

export type ParentLine = {
    type: "ParentLine";
    line_id: LineId,
    timestamp: DateTime,
    from: User,
    message: string,
    data: string
}

export type Line = {
    type: "Line";
    line_id: LineId,
    timestamp: DateTime,
    from: User,
    message: string,
    data: string,
    reply_to_line: LineId | null
}

export type Thread = {
    type: "Thread";
    line: Line,
    replies: Line[]
}

export type ConversationEvent = ConversationEventNewLine | ConversationEventJoin | ConversationEventLeave | ConversationEventStartTyping | ConversationEventEndTyping

export type ConversationEventNewLine = {
    type: "NewLine";
    line: Line
}

export type ConversationEventJoin = {
    type: "Join";
    timestamp: DateTime,
    from: User
}

export type ConversationEventLeave = {
    type: "Leave";
    timestamp: DateTime,
    from: User
}

export type ConversationEventStartTyping = {
    type: "StartTyping";
    timestamp: DateTime,
    from: User
}

export type ConversationEventEndTyping = {
    type: "EndTyping";
    timestamp: DateTime,
    from: User
}

export type Conversation = {
    type: "Conversation";
    conversation_id: ConversationId,
    timestamp: DateTime,
    number_of_unread_messages: number,
    newest_line: Line | null
}

export type PaginatedConversations = {
    type: "PaginatedConversations";
    next?: ConversationCursor,
    prev?: ConversationCursor,
    objs: Conversation[]
}

// ENDPOINTS

export type CreateUserInput = {
    type: "CreateUserInput";
    display_name: string,
    user_id: UserId
}
export type CreateUserOutput = {
    type: "CreateUserOutput";
    user_id: UserId
}
export type CreateUserResponse = utils.ApiResponse<CreateUserOutput, ResponseError>;
export function create_user (body: CreateUserInput): Promise<CreateUserResponse> { return utils.post(`/users`, body); }

export type UsersQuery = {
    type: "UsersQuery";
    name?: string,
    next?: number,
    prev?: number,
    limit?: number
}
export type UsersOutput = {
    type: "UsersOutput";
    users: PaginatedUsers
}
export type UsersResponse = utils.ApiResponse<UsersOutput, ResponseError>;
export function users (q: UsersQuery): Promise<UsersResponse> { return utils.get(`/users${utils.stringify_query(q)}`, q); }

export type GetUserOutput = {
    type: "GetUserOutput";
    user: User
}
export type GetUserResponse = utils.ApiResponse<GetUserOutput, ResponseError>;
export function get_user (user_id: UserId): Promise<GetUserResponse> { return utils.get(`/user/${user_id}`, user_id); }

export type DeleteUserOutput = {}
export type DeleteUserResponse = utils.ApiResponse<DeleteUserOutput, ResponseError>;
export function delete_user (user_id: UserId): Promise<DeleteUserResponse> { return utils.del(`/user/${user_id}`, user_id); }
