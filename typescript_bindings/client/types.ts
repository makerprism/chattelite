/* AUTOMATICALLY GENERATED BY codegen/main.ml */

// API input and output types
export type UserId = string

export type UserCursor = string

export type ConversationId = string

export type ConversationCursor = string

export type LineId = string

export type DateTime = string

// API input types


// API output types
export type User = {
    type: "User";
    display_name: string,
    user_id: UserId
}

export type PaginatedUsers = {
    type: "PaginatedUsers";
    next?: UserCursor,
    prev?: UserCursor,
    objs: User[]
}

export type ParentLine = {
    type: "ParentLine";
    line_id: LineId,
    timestamp: DateTime,
    from: User,
    message: string,
    data: string
}

export type Line = {
    type: "Line";
    line_id: LineId,
    timestamp: DateTime,
    from: User,
    message: string,
    data: string,
    reply_to_line: LineId | null
}

export type Thread = {
    type: "Thread";
    line: Line,
    replies: Line[]
}

export type ConversationEvent = ConversationEventNewLine | ConversationEventJoin | ConversationEventLeave | ConversationEventStartTyping | ConversationEventEndTyping

export type ConversationEventNewLine = {
    type: "NewLine";
    line: Line
}

export type ConversationEventJoin = {
    type: "Join";
    timestamp: DateTime,
    from: User
}

export type ConversationEventLeave = {
    type: "Leave";
    timestamp: DateTime,
    from: User
}

export type ConversationEventStartTyping = {
    type: "StartTyping";
    timestamp: DateTime,
    from: User
}

export type ConversationEventEndTyping = {
    type: "EndTyping";
    timestamp: DateTime,
    from: User
}

export type Conversation = {
    type: "Conversation";
    conversation_id: ConversationId,
    timestamp: DateTime,
    number_of_unread_messages: number,
    newest_line: Line | null
}

export type PaginatedConversations = {
    type: "PaginatedConversations";
    next?: ConversationCursor,
    prev?: ConversationCursor,
    objs: Conversation[]
}
