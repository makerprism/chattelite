import { writeFileSync } from "fs";
import * as postgresql from "./src/gen_db_postgresql";
import * as rust from "./src/gen_db_rust";

import * as maker_database from "./src/schema/db_schema";
import { Module } from "./src/types";
import { clear_files_from_dir } from "./src/gen_utils";

function gen_sql_and_rust(opts: { modules: Module[], SQL_DIRECTORY: string, RUST_DIRECTORY: string; }) {
    let id_types: string[] = [];

    clear_files_from_dir(opts.SQL_DIRECTORY);
    clear_files_from_dir(opts.RUST_DIRECTORY);

    for (let i = 0; i < opts.modules.length; i++) {
        let sql = postgresql.gen_module(opts.modules[i]);
        //console.log(sql);

        writeFileSync(`${opts.SQL_DIRECTORY}${`${('000' + (i + 1)).substr(-3)}_${opts.modules[i].name}`}.sql`, sql);

        let rust_file = rust.gen_module(opts.modules[i]);
        id_types = [
            ...id_types,
            ...rust.gen_id_types(opts.modules[i].tables)
        ];
        //console.log(rust_file);
        writeFileSync(`${opts.RUST_DIRECTORY}${opts.modules[i].name}.rs`, rust_file);
    }

    writeFileSync(`${opts.RUST_DIRECTORY}mod.rs`, `// Automatically generated by codegen/db, do NOT edit!
pub mod id_types;
pub use id_types::*;
${maker_database.modules.map(m => `pub mod ${m.name};\npub use ${m.name}::*;\n`).join("\n")}
`);

    writeFileSync(`${opts.RUST_DIRECTORY}id_types.rs`, `// Automatically generated by codegen/db, do NOT edit!
${id_types.join("\n")}
`);
}


gen_sql_and_rust({
    modules: maker_database.modules,
    SQL_DIRECTORY: "./../../db/sql/",
    RUST_DIRECTORY: "./../../backend/db_models/src/generated/"
});
