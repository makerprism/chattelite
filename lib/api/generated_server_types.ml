(* AUTOMATICALLY GENERATED BY codegen/main.ml *)

open Ppx_yojson_conv_lib.Yojson_conv

(* API input and output types *)
module UserId = struct
  type t = string [@@deriving yojson]
end

module UserCursor = struct
  type t = int64

  let string_of_t = Int64.to_string
  let t_of_string = Int64.of_string
  let yojson_of_t v = `String (string_of_t v)

  let t_of_yojson v =
    match v with
    | `String s -> t_of_string s
    | _ -> raise (Invalid_argument "Could not parse cursor value")
end

module ConversationId = struct
  type t = string [@@deriving yojson]
end

module ConversationCursor = struct
  type t = int64

  let string_of_t = Int64.to_string
  let t_of_string = Int64.of_string
  let yojson_of_t v = `String (string_of_t v)

  let t_of_yojson v =
    match v with
    | `String s -> t_of_string s
    | _ -> raise (Invalid_argument "Could not parse cursor value")
end

module LineId = struct
  type t = string [@@deriving yojson]
end

module DateTime = struct
  type t = string [@@deriving yojson]
end

(* API input types *)

(* API output types *)
module User = struct
  type t = { display_name : string; user_id : UserId.t } [@@deriving yojson]
end

module PaginatedUsers = struct
  type t = {
    next : UserCursor.t option;
    prev : UserCursor.t option;
    objs : User.t list;
  }
  [@@deriving yojson]
end

module ParentLine = struct
  type t = {
    line_id : LineId.t;
    timestamp : DateTime.t;
    from : User.t;
    message : string;
    data : string;
  }
  [@@deriving yojson]
end

module Line = struct
  type t = {
    line_id : LineId.t;
    timestamp : DateTime.t;
    from : User.t;
    message : string;
    data : string;
    reply_to_line : LineId.t option;
  }
  [@@deriving yojson]
end

module Thread = struct
  type t = { line : Line.t; replies : Line.t list } [@@deriving yojson]
end

module ConversationEvent = struct
  type t =
    | ConversationEventNewLine of { line : Line.t }
    | ConversationEventJoin of { timestamp : DateTime.t; from : User.t }
    | ConversationEventLeave of { timestamp : DateTime.t; from : User.t }
    | ConversationEventStartTyping of { timestamp : DateTime.t; from : User.t }
    | ConversationEventEndTyping of { timestamp : DateTime.t; from : User.t }
  [@@deriving yojson]
end

module Conversation = struct
  type t = {
    conversation_id : ConversationId.t;
    timestamp : DateTime.t;
    number_of_unread_messages : int;
    newest_line : Line.t option;
  }
  [@@deriving yojson]
end

module PaginatedConversations = struct
  type t = {
    next : ConversationCursor.t option;
    prev : ConversationCursor.t option;
    objs : Conversation.t list;
  }
  [@@deriving yojson]
end

(* endpoint types *)
module CreateUserInput = struct
  type t = { display_name : string; user_id : UserId.t } [@@deriving yojson]
end

module CreateUserOutput = struct
  type t = { user_id : UserId.t } [@@deriving yojson]
end

module UsersQuery = struct
  type t = {
    name : string option;
    next : UserCursor.t option;
    prev : UserCursor.t option;
    limit : int option;
  }
  [@@deriving yojson, query]
end

module UsersOutput = struct
  type t = { users : PaginatedUsers.t } [@@deriving yojson]
end

module GetUserOutput = struct
  type t = { user : User.t } [@@deriving yojson]
end

module DeleteUserOutput = struct
  type t = unit [@@deriving yojson]
end

module GenerateClientJwtInput = struct
  type t = { user_id : UserId.t } [@@deriving yojson]
end

module GenerateClientJwtOutput = struct
  type t = { jwt : string } [@@deriving yojson]
end

module CreateConversationInput = struct
  type t = { user_ids : UserId.t list; data : string } [@@deriving yojson]
end

module CreateConversationOutput = struct
  type t = { conversation_id : ConversationId.t } [@@deriving yojson]
end

module UpdateConverstaionInput = struct
  type t = { data : string } [@@deriving yojson]
end

module UpdateConverstaionOutput = struct
  type t = unit [@@deriving yojson]
end

module AddUsersToConversationInput = struct
  type t = { user_ids : UserId.t list } [@@deriving yojson]
end

module AddUsersToConversationOutput = struct
  type t = unit [@@deriving yojson]
end

module RemoveUsersFromConversationInput = struct
  type t = { user_ids : UserId.t list } [@@deriving yojson]
end

module RemoveUsersFromConversationOutput = struct
  type t = unit [@@deriving yojson]
end
