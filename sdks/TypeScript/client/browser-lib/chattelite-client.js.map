{
  "version": 3,
  "sources": ["../../../../../event-source-with-headers/src/index.ts", "../../../../../event-source-with-headers/src/browser.ts", "../src/utils.ts", "../src/config.ts", "../src/generated/types.ts", "../src/generated/endpoints.ts", "../src/index.ts", "../src/browser.ts"],
  "sourcesContent": ["/*\n    this is adapted from https://github.com/mattkrick/event-source-polyfill\n    to allow setting headers on the EventSource request\n\n    The MIT License (MIT)\n\n    Copyright (c) 2015 - 2016 Meteor Development Group, Inc.\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n*/\n\nenum Fields {\n    EVENT = 'event',\n    DATA = 'data',\n    ID = 'id',\n    RETRY = 'retry'\n}\n\ninterface MessagePayload {\n    field: Fields,\n    value: string\n}\n\n// removes leading BOM, etc\nconst decodeUTF8 = (str: string) => decodeURIComponent(escape(str))\nconst normalizeToLF = (str: string) => str.replace(/\\r\\n|\\r/g, '\\n')\n\n//@ts-ignore: Class 'EventSourceWithTokenAuth' incorrectly implements interface 'Omit<EventSource, \"withCredentials\">'.\n// Types of property 'addEventListener' are incompatible.\nclass EventSourceWithHeaders extends EventTarget implements EventSource {\n    readonly CONNECTING: 0 = 0\n    readonly OPEN: 1 = 1\n    readonly CLOSED: 2 = 2\n    readonly url: string\n    readonly withCredentials: boolean = false\n    readonly headers: { [header: string]: string } = {}\n    private lastEventId: string = ''\n    private reconnectionTime: number = 2000\n    private responseTextCursor: number = 0\n    private eventTypeBuffer: string = ''\n    private idBuffer: string = ''\n    private dataBuffer: string = ''\n    private canReconnect: boolean = true\n    // casted to ! because lib.dom is wrong\n    onerror!: (evt: Event) => any\n    onmessage!: (evt: MessageEvent) => any\n    onopen!: (evt: Event) => any\n    readyState!: number\n    xhr: XMLHttpRequest | undefined\n\n    constructor(url: string, config?: { withCredentials?: boolean, headers: { [header: string]: string } }) {\n        super()\n        this.url = url\n        this.withCredentials = Boolean(config && config.withCredentials)\n        if (config && config.headers) {\n            this.headers = config.headers\n        }\n        this.addEventListener('error', (e: Event) => {\n            if (this.onerror) this.onerror(e)\n        })\n        this.addEventListener('message', (e: Event) => {\n            // listener set as Event & later casted because lib.dom is wrong\n            if (this.onmessage) this.onmessage(e as MessageEvent)\n        })\n        this.addEventListener('open', (e: Event) => {\n            if (this.onopen) this.onopen(e)\n        })\n        this.connect()\n    }\n\n    private announceConnection() {\n        this.readyState = this.OPEN\n        this.dispatchEvent(new Event('open'))\n        this.responseTextCursor = 0\n    }\n\n    private connect(url: string = this.url) {\n        this.readyState = this.CONNECTING\n        const xhr = this.xhr = new XMLHttpRequest()\n        xhr.open('GET', url, true)\n        for (let h in this.headers) {\n            xhr.setRequestHeader(h, this.headers[h]);\n        }\n        xhr.setRequestHeader('Accept', 'text/event-stream')\n        xhr.setRequestHeader('Cache-Control', 'no-cache')\n        if (this.lastEventId) {\n            xhr.setRequestHeader('Last-Event-ID', this.lastEventId)\n        }\n        xhr.onreadystatechange = () => {\n            if (xhr.readyState <= 1 || this.readyState === this.CLOSED) return\n            if (xhr.readyState === 4) {\n                // is done\n                this.reestablishConnection()\n                return\n            }\n            switch (xhr.status) {\n                case 200:\n                    this.handleConnection(xhr)\n                    this.interpretStream(xhr)\n                    break\n                case 204:\n                    this.canReconnect = false\n                    break\n                case 301:\n                case 307:\n                    const redirectUrl = xhr.getResponseHeader('Location')\n                    this.failConnection(xhr, true)\n                    if (redirectUrl) {\n                        this.connect(redirectUrl)\n                    }\n                    break\n                default:\n                    this.failConnection(xhr)\n            }\n        }\n        xhr.send()\n    }\n\n    private dispatchMessageEvent(origin?: string) {\n        this.lastEventId = this.idBuffer\n        if (this.dataBuffer === '') {\n            this.eventTypeBuffer = ''\n            return\n        }\n        if (this.dataBuffer[this.dataBuffer.length - 1] === '\\n') {\n            this.dataBuffer = this.dataBuffer.slice(0, -1)\n        }\n        const eventType = this.eventTypeBuffer || 'message'\n        const event = new MessageEvent(eventType, { data: this.dataBuffer, origin, lastEventId: this.lastEventId })\n        this.eventTypeBuffer = ''\n        this.dataBuffer = ''\n        this.dispatchEvent(event)\n    }\n\n    private handleConnection(xhr: XMLHttpRequest) {\n        if (this.readyState === this.CONNECTING) {\n            const contentType = xhr.getResponseHeader('Content-Type')\n            if (contentType && contentType.toLowerCase() === 'text/event-stream') {\n                this.announceConnection()\n            } else {\n                this.failConnection(xhr)\n            }\n        }\n    }\n\n    private failConnection(xhr: XMLHttpRequest, isSilent: boolean = false) {\n        this.readyState = this.CLOSED\n        if (!isSilent) {\n            this.dispatchEvent(new Event('error'))\n        }\n        this.canReconnect = false\n        xhr.abort()\n    }\n\n    private interpretStream(xhr: XMLHttpRequest) {\n        if (this.readyState !== this.OPEN) return\n\n        let responseText = ''\n        try {\n            responseText = xhr.responseText\n        } catch {\n            return\n        }\n\n        const rawChunk = responseText.substring(this.responseTextCursor)\n        this.responseTextCursor = responseText.length\n\n        const chunk = normalizeToLF(decodeUTF8(rawChunk))\n\n        const lines = chunk.split('\\n')\n        for (let ii = 0; ii < lines.length; ii++) {\n            const line = lines[ii]\n            if (line === '') {\n                this.dispatchMessageEvent(xhr.responseURL)\n            } else {\n                const firstColonIdx = line.indexOf(':')\n                if (firstColonIdx === 0) {\n                    // ignore comment line\n                } else if (firstColonIdx !== -1) {\n                    const field = line.substring(0, firstColonIdx) as Fields\n                    const untrimmedVal = line.substring(firstColonIdx + 1)\n                    const value = untrimmedVal.indexOf(' ') === 0 ? untrimmedVal.slice(1) : untrimmedVal\n                    this.processField({ field, value })\n                } else {\n                    this.processField({ field: line as Fields, value: '' })\n                }\n            }\n        }\n\n    }\n\n    private processField(payload: MessagePayload) {\n        switch (payload.field) {\n            case Fields.EVENT:\n                this.eventTypeBuffer = payload.value\n                break\n            case Fields.DATA:\n                this.dataBuffer += `${payload.value}\\n`\n                break\n            case Fields.ID:\n                if (payload.value.indexOf('\\u0000') === -1) {\n                    this.idBuffer = payload.value\n                }\n                break\n            case Fields.RETRY:\n                const interval = +payload.value\n                if (Number.isInteger(interval)) {\n                    this.reconnectionTime = interval\n                }\n        }\n    }\n\n    private reestablishConnection() {\n        if (this.readyState === this.CLOSED || !this.canReconnect) return\n        this.readyState = this.CONNECTING\n        this.dispatchEvent(new Event('error'))\n        setTimeout(() => {\n            if (this.readyState !== this.CONNECTING) return\n            this.connect()\n        }, this.reconnectionTime)\n    }\n\n    close() {\n        this.readyState = this.CLOSED\n        this.xhr && this.xhr.abort()\n    }\n}\n\nexport default EventSourceWithHeaders\n", "import EventSourceWithHeaders from \".\";\n\nwindow[\"EventSourceWithHeaders\"] = EventSourceWithHeaders;\n", "import { API_URL } from \"./config\";\n\nexport type ApiResponse<S, E> = S | ApiResponseError<E>;\ntype BaseError = {\n    error: true;\n    status: number;\n    body: {\n        title: string;\n        detail: string;\n    };\n};\n\ntype NotFound = {\n    type: 'NotFound';\n    status: 404;\n};\n\ntype NotAuthenticated = {\n    type: 'NotAuthenticated';\n    status: 401;\n};\n\ntype Forbidden = {\n    type: 'Forbidden';\n    body: {\n        message: string;\n    };\n    status: 403;\n};\n\ntype BadRequest = {\n    type: 'BadRequest';\n    body: {\n        message: string;\n    };\n    status: 400;\n};\n\ntype InternalError = {\n    type: 'InternalError';\n    body: {\n        message: string;\n    };\n    status: 500;\n};\n\nexport type ApiResponseError<E> = BaseError &\n    (\n        | NotFound\n        | NotAuthenticated\n        | Forbidden\n        | BadRequest\n        | InternalError\n        | (E extends Object ? { body: E } : {})\n    );\n\nfunction api_fetch(url: string, opts: any): Promise<ApiResponse<any, any>> {\n    let fetch_url = API_URL + url;\n    console.log(['fetch_url', fetch_url]);\n    const response = fetch(fetch_url, opts).then(async (res: Response) => {\n        console.log(res);\n\n        switch (res.status) {\n            case 200:\n                return res.json();\n            default:\n                return res.json().then((data) => {\n                    return {\n                        error: true,\n                        status: res.status,\n                        body: data\n                    };\n                });\n        }\n    });\n\n    return response;\n}\n\ntype ApiHeaders = {\n    Accept: string;\n    'Content-Type'?: string;\n    'X-Access-Token'?: string;\n};\n\nexport function get(url: string, opts: { session_token?: string }) {\n    let headers: ApiHeaders = {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n    };\n    if (opts.session_token) {\n        headers['X-Access-Token'] = opts.session_token;\n    }\n    return api_fetch(url, {\n        headers\n    });\n}\n\nexport function post(url: string, opts: { session_token?: string }, body?: any) {\n    let b = body ? JSON.stringify(body) : 'null';\n    let headers: ApiHeaders = {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n    };\n    if (opts.session_token) {\n        headers['X-Access-Token'] = opts.session_token;\n    }\n    return api_fetch(url, {\n        method: 'POST',\n        body: b,\n        headers\n    });\n}\n\nexport function del(url: string, opts: { session_token?: string }) {\n    let headers: ApiHeaders = {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n    };\n    if (opts.session_token) {\n        headers['X-Access-Token'] = opts.session_token;\n    }\n    return api_fetch(url, {\n        method: 'DELETE',\n        headers\n    });\n}\n\nexport async function postFormData(\n    url: string,\n    opts: {\n        session_token: string;\n    },\n    formData: FormData\n) {\n    let headers: ApiHeaders = {\n        Accept: 'application/json'\n    };\n    if (opts.session_token) {\n        headers['X-Access-Token'] = opts.session_token;\n    }\n\n    return api_fetch(url, {\n        method: 'POST',\n        body: formData,\n        headers\n    });\n}\n\nfunction url_encode_add_key_value_pair(\n    result: [string, string][],\n    name: string,\n    value: string\n): void {\n    if (value === undefined || value === null) return;\n    result.push([encodeURIComponent(name), encodeURIComponent(value)]);\n}\n\ninterface QueryParamsInterface {\n    params: { [key: string]: string | number | boolean | QueryParamsInterface };\n    url_encode(): [string, string][];\n}\n\nclass GenericQueryParams implements QueryParamsInterface {\n    params: { [key: string]: string | number | boolean | QueryParamsInterface };\n\n    constructor(s: { [key: string]: string | number | boolean | QueryParamsInterface }) {\n        this.params = s;\n    }\n\n    url_encode(): [string, string][] {\n        let result: [string, string][] = [];\n        for (let key in this.params) {\n            let o = this.params[key];\n            if (o === null) continue;\n            if (typeof o === 'string' || typeof o === 'number' || typeof o === 'boolean') {\n                url_encode_add_key_value_pair(result, key, o.toString());\n                continue;\n            }\n            if (Array.isArray(o)) {\n                if (o.length > 0) {\n                    if (\n                        typeof o[0] === 'string' ||\n                        typeof o[0] === 'number' ||\n                        typeof o[0] === 'boolean'\n                    ) {\n                        url_encode_add_key_value_pair(result, key, o.join(','));\n                        continue;\n                    }\n                    /*if (typeof o[0] === \"object\" && o[0].hasOwnProperty(\"url_encode\")) {\n                        continue;\n                    }*/\n                }\n                throw 'url_encode not implemented for ' + typeof o + ' ' + JSON.stringify(o);\n            }\n            if (typeof o === 'object' && o.hasOwnProperty('url_encode')) {\n                for (let [k, v] of o.url_encode()) {\n                    result.push([`${key}.${k}`, v]);\n                }\n            }\n            throw 'url_encode not implemented for ' + typeof o + ' ' + JSON.stringify(o);\n        }\n\n        return result;\n    }\n}\n\nexport function stringify_query(q: any): string {\n    let result = new GenericQueryParams(q).url_encode();\n    console.log(['stringify_query', result]);\n    return result.length > 0 ? `?${result.map(([k, v]) => `${k}=${v}`).join('&')}` : '';\n}\n\nexport default {\n    get: get,\n    post: post,\n    postFormData: postFormData\n};\n", "export let API_URL: string | undefined = undefined;\n\nexport function init(api_url: string) {\n    API_URL = api_url;\n}\n", "// AUTOMATICALLY GENERATED, DO NOT EDIT!!\n// API input and output types\nexport type UserId = string\n\nexport type ConversationId = string;\n\nexport type LineId = string;\n\nexport type user_id = string\n\nexport type DateTime = string\n    \n// API input types\n\n    \n// API output types\nexport type User = {\n    id: UserId,\n    display_name: string\n}\n\nexport type ConnectionEvent = ConnectionEventUnreadMessage\n\nexport type ConnectionEventUnreadMessage = {\n    type: \"UnreadMessage\",\n    timestamp: DateTime,\n    conversation_id: ConversationId,\n    from: User\n}\n\nexport type ConversationEvent = ConversationEventMessage | ConversationEventJoin | ConversationEventLeave | ConversationEventStartTyping | ConversationEventEndTyping\n\nexport type ConversationEventMessage = {\n    type: \"Message\",\n    timestamp: DateTime,\n    from: User,\n    content: string\n}\n\nexport type ConversationEventJoin = {\n    type: \"Join\",\n    timestamp: DateTime,\n    from: User\n}\n\nexport type ConversationEventLeave = {\n    type: \"Leave\",\n    timestamp: DateTime,\n    from: User\n}\n\nexport type ConversationEventStartTyping = {\n    type: \"StartTyping\",\n    timestamp: DateTime,\n    from: User\n}\n\nexport type ConversationEventEndTyping = {\n    type: \"EndTyping\",\n    timestamp: DateTime,\n    from: User\n}\n\n\nexport type GetConnectionEventsOutput = {\n    events: ConnectionEvent[]\n};\n\n\n\nexport type GetConversationEventsOutput = {\n    events: ConversationEvent[]\n};\n\n\n\nexport type SendMessageInput = {\n    content: string\n};\n\n\n\n\n\n\n\nexport type MarkReadInput = {\n    conversation_id: ConversationId,\n    line_id: LineId\n};\n\n\n", "// AUTOMATICALLY GENERATED, DO NOT EDIT!!\nimport * as T from \"./types\";\nimport * as utils from \"../utils\";\n\nexport type GetConnectionEventsResponse = utils.ApiResponse<T.GetConnectionEventsOutput, void>;\n\nexport function get_connection_events (\n    opts: { session_token: string}\n): Promise<GetConnectionEventsResponse> {\n    return utils.get(`/events`, opts);\n}\n\nexport type GetConversationEventsResponse = utils.ApiResponse<T.GetConversationEventsOutput, void>;\n\nexport function get_conversation_events (\n    opts: { session_token: string},\n    conversation_id: T.ConversationId\n): Promise<GetConversationEventsResponse> {\n    return utils.get(`/conversation/${conversation_id}/events`, opts);\n}\n\nexport type SendMessageResponse = utils.ApiResponse<{}, void>;\n\nexport function send_message (\n    opts: { session_token: string},\n    conversation_id: T.ConversationId,\n    body: T.SendMessageInput\n): Promise<SendMessageResponse> {\n    return utils.post(`/conversation/${conversation_id}`, opts, body);\n}\n\nexport type StartTypingResponse = utils.ApiResponse<{}, void>;\n\nexport function start_typing (\n    opts: { session_token: string},\n    conversation_id: T.ConversationId,\n    body: {}\n): Promise<StartTypingResponse> {\n    return utils.post(`/conversation/${conversation_id}/start-typing`, opts, body);\n}\n\nexport type StopTypingResponse = utils.ApiResponse<{}, void>;\n\nexport function stop_typing (\n    opts: { session_token: string},\n    conversation_id: T.ConversationId,\n    body: {}\n): Promise<StopTypingResponse> {\n    return utils.post(`/conversation/${conversation_id}/stop-typing`, opts, body);\n}\n\nexport type MarkReadResponse = utils.ApiResponse<{}, void>;\n\nexport function mark_read (\n    opts: { session_token: string},\n    body: T.MarkReadInput\n): Promise<MarkReadResponse> {\n    return utils.post(`/read`, opts, body);\n}\n", "//import * as EventSourceWithHeaders from \"event-source-with-headers\";\n\nimport * as Utils from \"./utils\";\nimport * as Types from \"./generated/types\";\nimport * as Endpoints from \"./generated/endpoints\";\nimport { init } from \"./config\";\nimport EventSourceWithHeaders from \"event-source-with-headers\";\n\nconst ChatteliteClient = {\n    EventSourceWithHeaders,\n    init,\n    Types,\n    Endpoints,\n    Utils,\n}\n\nexport default ChatteliteClient;\n", "import ChatteliteClient from \".\";\n\n//@ts-ignore\nwindow[\"ChatteliteClient\"] = ChatteliteClient;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA,YAAMA,IAAcC,OAAgB,mBAAmB,OAAOA,CAAG,CAAC,GAC5DC,IAAiBD,OAAgBA,EAAI,QAAQ,YAAY;CAAI,GAI7DE,IAAN,cAAqC,YAAmC;UAqBpE,YAAYC,GAAaC,GAA+E;AACpG,kBAAM;AArBV,iBAAS,aAAgB;AACzB,iBAAS,OAAU;AACnB,iBAAS,SAAY;AAErB,iBAAS,kBAA2B;AACpC,iBAAS,UAAwC,CAAC;AAClD,iBAAQ,cAAsB;AAC9B,iBAAQ,mBAA2B;AACnC,iBAAQ,qBAA6B;AACrC,iBAAQ,kBAA0B;AAClC,iBAAQ,WAAmB;AAC3B,iBAAQ,aAAqB;AAC7B,iBAAQ,eAAwB;AAU5B,iBAAK,MAAMD,GACX,KAAK,kBAAkB,QAAQC,KAAUA,EAAO,eAAe,GAC3DA,KAAUA,EAAO,YACjB,KAAK,UAAUA,EAAO,UAE1B,KAAK,iBAAiB,SAAUC,OAAa;AACrC,mBAAK,WAAS,KAAK,QAAQA,CAAC;YACpC,CAAC,GACD,KAAK,iBAAiB,WAAYA,OAAa;AAEvC,mBAAK,aAAW,KAAK,UAAUA,CAAiB;YACxD,CAAC,GACD,KAAK,iBAAiB,QAASA,OAAa;AACpC,mBAAK,UAAQ,KAAK,OAAOA,CAAC;YAClC,CAAC,GACD,KAAK,QAAQ;UACjB;UAEQ,qBAAqB;AACzB,iBAAK,aAAa,KAAK,MACvB,KAAK,cAAc,IAAI,MAAM,MAAM,CAAC,GACpC,KAAK,qBAAqB;UAC9B;UAEQ,QAAQF,IAAc,KAAK,KAAK;AACpC,iBAAK,aAAa,KAAK;AACvB,gBAAMG,IAAM,KAAK,MAAM,IAAI;AAC3BA,cAAI,KAAK,OAAOH,GAAK,IAAI;AACzB,qBAASI,KAAK,KAAK;AACfD,gBAAI,iBAAiBC,GAAG,KAAK,QAAQA,EAAE;AAE3CD,cAAI,iBAAiB,UAAU,mBAAmB,GAClDA,EAAI,iBAAiB,iBAAiB,UAAU,GAC5C,KAAK,eACLA,EAAI,iBAAiB,iBAAiB,KAAK,WAAW,GAE1DA,EAAI,qBAAqB,MAAM;AAC3B,kBAAI,EAAAA,EAAI,cAAc,KAAK,KAAK,eAAe,KAAK,SACpD;AAAA,oBAAIA,EAAI,eAAe,GAAG;AAEtB,uBAAK,sBAAsB;AAC3B;gBACJ;AACA,wBAAQA,EAAI,QAAQ;kBAChB,KAAK;AACD,yBAAK,iBAAiBA,CAAG,GACzB,KAAK,gBAAgBA,CAAG;AACxB;kBACJ,KAAK;AACD,yBAAK,eAAe;AACpB;kBACJ,KAAK;kBACL,KAAK;AACD,wBAAME,IAAcF,EAAI,kBAAkB,UAAU;AACpD,yBAAK,eAAeA,GAAK,IAAI,GACzBE,KACA,KAAK,QAAQA,CAAW;AAE5B;kBACJ;AACI,yBAAK,eAAeF,CAAG;gBAC/B;cAAA;YACJ,GACAA,EAAI,KAAK;UACb;UAEQ,qBAAqBG,GAAiB;AAE1C,gBADA,KAAK,cAAc,KAAK,UACpB,KAAK,eAAe,IAAI;AACxB,mBAAK,kBAAkB;AACvB;YACJ;AACI,iBAAK,WAAW,KAAK,WAAW,SAAS,OAAO;MAChD,KAAK,aAAa,KAAK,WAAW,MAAM,GAAG,EAAE;AAEjD,gBAAMC,IAAY,KAAK,mBAAmB,WACpCC,IAAQ,IAAI,aAAaD,GAAW,EAAE,MAAM,KAAK,YAAY,QAAAD,GAAQ,aAAa,KAAK,YAAY,CAAC;AAC1G,iBAAK,kBAAkB,IACvB,KAAK,aAAa,IAClB,KAAK,cAAcE,CAAK;UAC5B;UAEQ,iBAAiBL,GAAqB;AAC1C,gBAAI,KAAK,eAAe,KAAK,YAAY;AACrC,kBAAMM,IAAcN,EAAI,kBAAkB,cAAc;AACpDM,mBAAeA,EAAY,YAAY,MAAM,sBAC7C,KAAK,mBAAmB,IAExB,KAAK,eAAeN,CAAG;YAE/B;UACJ;UAEQ,eAAeA,GAAqBO,IAAoB,OAAO;AACnE,iBAAK,aAAa,KAAK,QAClBA,KACD,KAAK,cAAc,IAAI,MAAM,OAAO,CAAC,GAEzC,KAAK,eAAe,OACpBP,EAAI,MAAM;UACd;UAEQ,gBAAgBA,GAAqB;AACzC,gBAAI,KAAK,eAAe,KAAK;AAAM;AAEnC,gBAAIQ,IAAe;AACnB,gBAAI;AACAA,kBAAeR,EAAI;YACvB,SAAQD,GAAR;AACI;YACJ;AAEA,gBAAMU,IAAWD,EAAa,UAAU,KAAK,kBAAkB;AAC/D,iBAAK,qBAAqBA,EAAa;AAIvC,gBAAME,IAFQf,EAAcF,EAAWgB,CAAQ,CAAC,EAE5B,MAAM;CAAI;AAC9B,qBAASE,IAAK,GAAGA,IAAKD,EAAM,QAAQC,KAAM;AACtC,kBAAMC,IAAOF,EAAMC;AACnB,kBAAIC,MAAS;AACT,qBAAK,qBAAqBZ,EAAI,WAAW;mBACtC;AACH,oBAAMa,IAAgBD,EAAK,QAAQ,GAAG;AACtC,oBAAIC,MAAkB;AAEf,sBAAIA,MAAkB,IAAI;AAC7B,wBAAMC,IAAQF,EAAK,UAAU,GAAGC,CAAa,GACvCE,IAAeH,EAAK,UAAUC,IAAgB,CAAC,GAC/CG,IAAQD,EAAa,QAAQ,GAAG,MAAM,IAAIA,EAAa,MAAM,CAAC,IAAIA;AACxE,yBAAK,aAAa,EAAE,OAAAD,GAAO,OAAAE,EAAM,CAAC;kBACtC;AACI,yBAAK,aAAa,EAAE,OAAOJ,GAAgB,OAAO,GAAG,CAAC;cAE9D;YACJ;UAEJ;UAEQ,aAAaK,GAAyB;AAC1C,oBAAQA,EAAQ,OAAO;cACnB,KAAK;AACD,qBAAK,kBAAkBA,EAAQ;AAC/B;cACJ,KAAK;AACD,qBAAK,cAAc,GAAGA,EAAQ;;AAC9B;cACJ,KAAK;AACGA,kBAAQ,MAAM,QAAQ,IAAQ,MAAM,OACpC,KAAK,WAAWA,EAAQ;AAE5B;cACJ,KAAK;AACD,oBAAMC,IAAW,CAACD,EAAQ;AACtB,uBAAO,UAAUC,CAAQ,MACzB,KAAK,mBAAmBA;YAEpC;UACJ;UAEQ,wBAAwB;AACxB,iBAAK,eAAe,KAAK,UAAU,CAAC,KAAK,iBAC7C,KAAK,aAAa,KAAK,YACvB,KAAK,cAAc,IAAI,MAAM,OAAO,CAAC,GACrC,WAAW,MAAM;AACT,mBAAK,eAAe,KAAK,cAC7B,KAAK,QAAQ;YACjB,GAAG,KAAK,gBAAgB;UAC5B;UAEA,QAAQ;AACJ,iBAAK,aAAa,KAAK,QACvB,KAAK,OAAO,KAAK,IAAI,MAAM;UAC/B;QACJ,GAEOC,IAAQvB;AClPf,eAAO,yBAA4BuB;MAAAA,GAAAA;;;;;ACFnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAO,MAAI,UAA8B;AAElC,WAAS,KAAK,SAAiB;AAClC,cAAU;AAAA,EACd;;;ADoDA,WAAS,UAAU,KAAa,MAA2C;AACvE,QAAI,YAAY,UAAU;AAC1B,YAAQ,IAAI,CAAC,aAAa,SAAS,CAAC;AACpC,UAAM,WAAW,MAAM,WAAW,IAAI,EAAE,KAAK,CAAO,QAAkB;AAClE,cAAQ,IAAI,GAAG;AAEf,cAAQ,IAAI,QAAQ;AAAA,QAChB,KAAK;AACD,iBAAO,IAAI,KAAK;AAAA,QACpB;AACI,iBAAO,IAAI,KAAK,EAAE,KAAK,CAAC,SAAS;AAC7B,mBAAO;AAAA,cACH,OAAO;AAAA,cACP,QAAQ,IAAI;AAAA,cACZ,MAAM;AAAA,YACV;AAAA,UACJ,CAAC;AAAA,MACT;AAAA,IACJ,EAAC;AAED,WAAO;AAAA,EACX;AAQO,WAAS,IAAI,KAAa,MAAkC;AAC/D,QAAI,UAAsB;AAAA,MACtB,QAAQ;AAAA,MACR,gBAAgB;AAAA,IACpB;AACA,QAAI,KAAK,eAAe;AACpB,cAAQ,oBAAoB,KAAK;AAAA,IACrC;AACA,WAAO,UAAU,KAAK;AAAA,MAClB;AAAA,IACJ,CAAC;AAAA,EACL;AAEO,WAAS,KAAK,KAAa,MAAkC,MAAY;AAC5E,QAAI,IAAI,OAAO,KAAK,UAAU,IAAI,IAAI;AACtC,QAAI,UAAsB;AAAA,MACtB,QAAQ;AAAA,MACR,gBAAgB;AAAA,IACpB;AACA,QAAI,KAAK,eAAe;AACpB,cAAQ,oBAAoB,KAAK;AAAA,IACrC;AACA,WAAO,UAAU,KAAK;AAAA,MAClB,QAAQ;AAAA,MACR,MAAM;AAAA,MACN;AAAA,IACJ,CAAC;AAAA,EACL;AAEO,WAAS,IAAI,KAAa,MAAkC;AAC/D,QAAI,UAAsB;AAAA,MACtB,QAAQ;AAAA,MACR,gBAAgB;AAAA,IACpB;AACA,QAAI,KAAK,eAAe;AACpB,cAAQ,oBAAoB,KAAK;AAAA,IACrC;AACA,WAAO,UAAU,KAAK;AAAA,MAClB,QAAQ;AAAA,MACR;AAAA,IACJ,CAAC;AAAA,EACL;AAEA,WAAsB,aAClB,KACA,MAGA,UACF;AAAA;AACE,UAAI,UAAsB;AAAA,QACtB,QAAQ;AAAA,MACZ;AACA,UAAI,KAAK,eAAe;AACpB,gBAAQ,oBAAoB,KAAK;AAAA,MACrC;AAEA,aAAO,UAAU,KAAK;AAAA,QAClB,QAAQ;AAAA,QACR,MAAM;AAAA,QACN;AAAA,MACJ,CAAC;AAAA,IACL;AAAA;AAEA,WAAS,8BACL,QACA,MACA,OACI;AACJ,QAAI,UAAU,UAAa,UAAU;AAAM;AAC3C,WAAO,KAAK,CAAC,mBAAmB,IAAI,GAAG,mBAAmB,KAAK,CAAC,CAAC;AAAA,EACrE;AAOA,MAAM,qBAAN,MAAyD;AAAA,IAGrD,YAAY,GAAwE;AAChF,WAAK,SAAS;AAAA,IAClB;AAAA,IAEA,aAAiC;AAC7B,UAAI,SAA6B,CAAC;AAClC,eAAS,OAAO,KAAK,QAAQ;AACzB,YAAI,IAAI,KAAK,OAAO;AACpB,YAAI,MAAM;AAAM;AAChB,YAAI,OAAO,MAAM,YAAY,OAAO,MAAM,YAAY,OAAO,MAAM,WAAW;AAC1E,wCAA8B,QAAQ,KAAK,EAAE,SAAS,CAAC;AACvD;AAAA,QACJ;AACA,YAAI,MAAM,QAAQ,CAAC,GAAG;AAClB,cAAI,EAAE,SAAS,GAAG;AACd,gBACI,OAAO,EAAE,OAAO,YAChB,OAAO,EAAE,OAAO,YAChB,OAAO,EAAE,OAAO,WAClB;AACE,4CAA8B,QAAQ,KAAK,EAAE,KAAK,GAAG,CAAC;AACtD;AAAA,YACJ;AAAA,UAIJ;AACA,gBAAM,oCAAoC,OAAO,IAAI,MAAM,KAAK,UAAU,CAAC;AAAA,QAC/E;AACA,YAAI,OAAO,MAAM,YAAY,EAAE,eAAe,YAAY,GAAG;AACzD,mBAAS,CAAC,GAAG,CAAC,KAAK,EAAE,WAAW,GAAG;AAC/B,mBAAO,KAAK,CAAC,GAAG,OAAO,KAAK,CAAC,CAAC;AAAA,UAClC;AAAA,QACJ;AACA,cAAM,oCAAoC,OAAO,IAAI,MAAM,KAAK,UAAU,CAAC;AAAA,MAC/E;AAEA,aAAO;AAAA,IACX;AAAA,EACJ;AAEO,WAAS,gBAAgB,GAAgB;AAC5C,QAAI,SAAS,IAAI,mBAAmB,CAAC,EAAE,WAAW;AAClD,YAAQ,IAAI,CAAC,mBAAmB,MAAM,CAAC;AACvC,WAAO,OAAO,SAAS,IAAI,IAAI,OAAO,IAAI,CAAC,CAAC,GAAG,CAAC,MAAM,GAAG,KAAK,GAAG,EAAE,KAAK,GAAG,MAAM;AAAA,EACrF;AAEA,MAAO,gBAAQ;AAAA,IACX;AAAA,IACA;AAAA,IACA;AAAA,EACJ;;;AEzNA;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMO,WAAS,sBACZ,MACoC;AACpC,WAAa,IAAI,WAAW,IAAI;AAAA,EACpC;AAIO,WAAS,wBACZ,MACA,iBACsC;AACtC,WAAa,IAAI,iBAAiB,0BAA0B,IAAI;AAAA,EACpE;AAIO,WAAS,aACZ,MACA,iBACA,MAC4B;AAC5B,WAAa,KAAK,iBAAiB,mBAAmB,MAAM,IAAI;AAAA,EACpE;AAIO,WAAS,aACZ,MACA,iBACA,MAC4B;AAC5B,WAAa,KAAK,iBAAiB,gCAAgC,MAAM,IAAI;AAAA,EACjF;AAIO,WAAS,YACZ,MACA,iBACA,MAC2B;AAC3B,WAAa,KAAK,iBAAiB,+BAA+B,MAAM,IAAI;AAAA,EAChF;AAIO,WAAS,UACZ,MACA,MACyB;AACzB,WAAa,KAAK,SAAS,MAAM,IAAI;AAAA,EACzC;;;ACpDA,yCAAmC;AAEnC,MAAM,mBAAmB;AAAA,IACrB,yDAAAC;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AAEA,MAAO,cAAQ;;;ACbf,SAAO,sBAAsB;",
  "names": ["decodeUTF8", "str", "normalizeToLF", "EventSourceWithHeaders", "url", "config", "e", "xhr", "h", "redirectUrl", "origin", "eventType", "event", "contentType", "isSilent", "responseText", "rawChunk", "lines", "ii", "line", "firstColonIdx", "field", "untrimmedVal", "value", "payload", "interval", "src_default", "EventSourceWithHeaders"]
}
